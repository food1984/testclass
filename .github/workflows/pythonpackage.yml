name: Python package

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pip install -r test_requirements.txt
        coverage run -m pytest --junitxml=test-results/test-results.xml

    - name: Generate reports
      run: |
        coverage report
        coverage xml -o test-results/coverage.xml
        coverage html

    - name: Publish reports
      env:
        CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        VERSION: 1.1.0
      run: |
        echo "CODACY"
        echo "release-$VERSION"
        python-codacy-coverage -r test-results/coverage.xml

    - name: create package
      run: |
        pip install --user --upgrade setuptools wheel pkutils
        python setup.py sdist bdist_wheel

    - name: set variables
      run: |
        echo ::set-env name=VERSION::$(python setup.py --version)
        echo ::set-env name=RELEASE::release-$(python setup.py --version)
        echo ::set-env name=ASSET_PATH::dist/testclass-$(python setup.py --version).tar.gz

    - name: publish package to github as a release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE }}
        release_name: ${{ env.RELEASE }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ${{ env.ASSET_PATH }}
        asset_name: testclass_package
        asset_content_type: application/zip
